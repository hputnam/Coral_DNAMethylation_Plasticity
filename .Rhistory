#calculate similarity matrix of euclidean distance
MC.dist.euc <- vegdist(cleaned.MC.data, method = "euclidean", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = TRUE) #calculates euclidean distance on the transformed data matrix
MC.pca.res <- prcomp(MC.dist.euc, retx=TRUE)
summary(MC.pca.res)
#Double check for outliers
biplot(MC.pca.res)
ordiellipse(MC.pca.res,group=rep(c(1), c(length(cleaned.MC.Treat))), conf=0.99, kind='sd', draw='lines')
# extract all PCs
MC.scores <- as.data.frame(MC.pca.res$x)
MC.PCA.plot <- ggplot(MC.scores, aes(x = PC1, y = PC2, shape=cleaned.MC.Treat , col=cleaned.MC.Treat )) +
geom_point(size=4) + # use points +
scale_shape_manual(values=c(16,16)) + #create your own scale and values for scale
theme(panel.background = element_rect(fill='white', colour='black')) + #removes gray background
theme(panel.grid.major = element_line(colour="white"), panel.grid.minor = element_line(colour="white")) + #Set the panel gridlines
theme(legend.key = element_rect(fill='white')) + #Set plot legend key
theme(panel.border = element_rect(fill=NA, size = 1, colour = "black")) + #Set the border
ggtitle("M. capitata")
MC.PCA.plot
#Montipora OPLS Data
MC.X<-as.matrix(cleaned.MC.data) #SELECT DATA -- USER INPUT
class(MC.X)<-'numeric' #changes class data to numeric
MC.Y<-as.matrix(as.numeric(as.factor(as.vector(cleaned.MC.info$Treatment)))) #SELECT GROUPING -- USER INPUT BY CHANGING COLUMN USED
MC.ulabels <- unique(as.vector(cleaned.MC.info$Treatment)) #PICK LABELS
set.seed(10) #sets the value on the uniform random-number generator so that the analysis can be reproduced every time
MC.resultsALL<-n.group.opls(MC.X,MC.Y, num_permutations=100, CV= 10, nIterations=100, min_num_OPLS_fact=1) #RUNS MODEL
MC.Q2<-MC.resultsALL$Q2 #GIVES Q2 VALUE
MC.pval<-MC.resultsALL$helper.results$pvalue #GIVES P-VALUE FOR MODEL
MC.modelALL <- MC.resultsALL$helper.results$model #lists results
MC.OPLSResults<-data.frame(model=c('M. capitata'), Q2=c(MC.Q2), pval=c(MC.pval)) #lists Q2 and p
MC.OPLSResults
#visualize
MC.t.opls <- as.numeric(as.vector(MC.modelALL$t)) #assign numeric t values from OPLS results
MC.t.ortho.opls <- as.numeric(as.vector(MC.modelALL$t_ortho)) #assign numeric t-orthogonal values from OPLS results
MC.metabo.data <- data.frame(cleaned.MC.Treat, MC.t.opls, MC.t.ortho.opls) #create a dataframe
colnames(MC.metabo.data) <- c("Treatment", "t", "t.ortho") #Rename columns
Fig14 <- ggplot(MC.metabo.data, aes(t, t.ortho)) +
geom_point(aes(x=t, y=t.ortho, colour=Treatment)) +
scale_colour_manual("Treatment", values = c("blue","red")) + #Set colors for Species
xlim(-1600, 1600) +
ylim(-2500, 2500) +
ggtitle("B  Montipora capitata") + #Label graph
xlab("t") + #Label the X Axis
ylab("t-Orthogonal") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position="top", #Set position of legend in graphic
plot.title=element_text(hjust=0, face="bold.italic")) #Justify the title to the top left and use Bold italics font
Fig14  #View figure
#POCILLIPORA OUTLIER CHECK
PD.data <-subset(cleaned.all.data, cleaned.all.info$Species=='Pocillopora damicornis') #Select only the Pocillopora data from the dataset from which outliers have been removed.
PD.info<-subset(cleaned.all.info, cleaned.all.info$Species=='Pocillopora damicornis') #Select only the Pocillopora info
which(colSums(PD.data) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
PD.data <- PD.data [, colSums(PD.data  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.data) ==0) #check again for any zero columns
#assign treatment from info
PD.Treatment <- PD.info$Treatment
#Scale the data
PD.NMRData.scale <- scaling(PD.data, type="pareto")
#Mean center the data
PD.NMRData.scale <- scale(PD.NMRData.scale, center=TRUE, scale=FALSE)
#calculate similarity matrix of euclidean distance
PD.dist.euc <- vegdist(PD.NMRData.scale, method = "euclidean", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE) #calculates euclidean distance on the transformed data matrix
PD.pca.res <- prcomp(PD.dist.euc, retx=TRUE)
summary(PD.pca.res)
biplot(PD.pca.res)
ordiellipse(PD.pca.res,group=rep(c(1), c(length(PD.Treatment))), conf=0.99, kind='sd', draw='lines')
#remove outliers and assess sample size
cleaned.PD.data <- PD.NMRData.scale[-c(17),] #remove outliers identified in PCA
cleaned.PD.info <- PD.info[-c(17),] #remove sample info of outliers identified in PCA
cleaned.PD.Treat <- cleaned.PD.info$Treatment #Set the treatment information for the filtered data
PD.counts <- aggregate(cleaned.PD.info["Coral.ID"], by=cleaned.PD.info[c("Species","Treatment")], FUN=length) #check the sample size for each Treatment
PD.counts #view the sample size for each Treatment
#calculate similarity matrix of euclidean distance
PD.dist.euc <- vegdist(cleaned.PD.data, method = "euclidean", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = TRUE) #calculates euclidean distance on the transformed data matrix
PD.pca.res <- prcomp(PD.dist.euc, retx=TRUE)
summary(PD.pca.res)
#Double check for outliers
biplot(PD.pca.res)
ordiellipse(PD.pca.res,group=rep(c(1), c(length(cleaned.PD.Treat))), conf=0.99, kind='sd', draw='lines')
# extract all PCs
PD.scores <- as.data.frame(PD.pca.res$x)
PD.PCA.plot <- ggplot(PD.scores, aes(x = PC1, y = PC2, shape=cleaned.PD.Treat, col=cleaned.PD.Treat)) +
geom_point(size=4) + # use points +
scale_shape_manual(values=c(17,17)) + #create your own scale and values for scale
theme(panel.background = element_rect(fill='white', colour='black')) + #removes gray background
theme(panel.grid.major = element_line(colour="white"), panel.grid.minor = element_line(colour="white")) + #Set the panel gridlines
theme(legend.key = element_rect(fill='white')) + #Set plot legend key
theme(panel.border = element_rect(fill=NA, size = 1, colour = "black")) + #Set the border
ggtitle("P. damicornis")
PD.PCA.plot
PD.X<-as.matrix(cleaned.PD.data) #SELECT DATA -- USER INPUT
class(PD.X)<-'numeric' #changes class data to numeric
PD.Y<-as.matrix(as.numeric(as.factor(as.vector(cleaned.PD.info$Treatment)))) #SELECT GROUPING -- USER INPUT BY CHANGING COLUMN USED
PD.ulabels <- unique(as.vector(cleaned.PD.info$Treatment)) #PICK LABELS
set.seed(10)
PD.resultsALL<-n.group.opls(PD.X,PD.Y, num_permutations=100, CV= 10, nIterations=100, min_num_OPLS_fact=1) #RUNS MODEL
PD.Q2<-PD.resultsALL$Q2 #GIVES Q2 VALUE
PD.pval<-PD.resultsALL$helper.results$pvalue #GIVES P-VALUE FOR MODEL
PD.modelALL <- PD.resultsALL$helper.results$model
PD.OPLSResults<-data.frame(model=c('P. damicornis'), Q2=c(PD.Q2), pval=c(PD.pval))
PD.OPLSResults #View Results
#visualize
PD.t.opls <- as.numeric(as.vector(PD.modelALL$t)) #assign numeric t values from OPLS results
PD.t.ortho.opls <- as.numeric(as.vector(PD.modelALL$t_ortho)) #assign numeric t-orthogonal values from OPLS results
PD.metabo.data <- data.frame(cleaned.PD.Treat, PD.t.opls, PD.t.ortho.opls) #create a dataframe
colnames(PD.metabo.data) <- c("Treatment", "t", "t.ortho") #Rename columns
Fig15 <- ggplot(PD.metabo.data, aes(t, t.ortho)) +
geom_point(aes(x=t, y=t.ortho, colour=Treatment)) +
scale_colour_manual("Treatment", values = c("blue","red")) + #Set colors for Species
xlim(-1600, 1600) +
ylim(-2500, 2500) +
ggtitle("C  Pocillopora damicornis") + #Label graph
xlab("t") + #Label the X Axis
ylab("t-Orthogonal") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position="top", #Set position of legend in graphic
plot.title=element_text(hjust=0, face="bold.italic")) #Justify the title to the top left and use Bold italics font
Fig15  #View figure
#subset data by species and treatment use NMRData.norm (inout data file with negative values replaced with 0s)
MC.list <- cleaned.MC.info$Coral.ID #list of clean coral IDs
PD.list <- cleaned.PD.info$Coral.ID #list of clean coral IDs
MC.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='High') #Montipora
MC.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='Ambient') #Montipora
PD.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='High') #Pocillopora
PD.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='Ambient') #Pocillopora
MC.RSD.high <-(apply(MC.amb,2, sd)/colMeans(MC.high)*100)
MC.RSD.high
write(MC.high, file="MC.high.csv")
MC.RSD.high <-as.data.frame(apply(MC.amb,2, sd)/colMeans(MC.high)*100)
MC.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='High') #Montipora
MC.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='Ambient') #Montipora
PD.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='High') #Pocillopora
PD.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='Ambient') #Pocillopora
write.csv(MC.high, file="MC.high.csv")
which(colSums(MC.high) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
MC.high <- MC.high [, colSums(MC.high  != 0) > 0] #remove the coloumns that have zeros
which(colSums(MC.high) ==0) #check again for any zero columns
which(colSums(MC.high) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
MC.high <- MC.high [, colSums(MC.high  != 0) > 0] #remove the coloumns that have zeros
which(colSums(MC.high) ==0) #check again for any zero columns
which(colSums(MC.amb) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
MC.amb <- MC.amb [, colSums(MC.amb  != 0) > 0] #remove the coloumns that have zeros
which(colSums(MC.amb) ==0) #check again for any zero columns
which(colSums(PD.high) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
PD.high <- PD.high [, colSums(PD.high  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.high) ==0) #check again for any zero columns
which(colSums(PD.amb) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
PD.amb <- PD.amb [, colSums(PD.amb  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.amb) ==0) #check again for any zero columns
MC.RSD.high <-(apply(MC.amb,2, sd)/colMeans(MC.high)*100)
MC.RSD.high <-(apply(MC.high,2, sd)/colMeans(MC.high)*100)
MC.RSD.high
MC.RSD.high <-(apply(MC.high,2, sd)/colMeans(MC.high)*100)
MC.RSD.amb <-(apply(MC.amb,2, sd)/colMeans(MC.amb)*100)
range(MC.RSD.high)
range(MC.RSD.amb)
PD.RSD.high <-(apply(PD.high,2, sd)/colMeans(PD.high)*100)
PD.RSD.amb <-(apply(PD.amb,2, sd)/colMeans(PD.amb)*100)
range(PD.RSD.high)
range(PD.RSD.amb)
df.m<-melt(cbind(MC.RSD.high, MC.RSD.amb, PD.RSD.high, PD.RSD.amb)) #combines and melts data into long format
RSDdf.omit<-na.omit(df.m) #removes NA values
shapiro.test(RSDdf.omit$value) # checks for normality: non-normal data
hist(RSDdf.omit$value)
result <-kruskal.test(RSDdf.omit$value, RSDdf.omit$X2, p.adj='bonferroni') #performs Kruskal_walis One Way Analysis of Variance
result
names <- unique(RSDdf.omit$X2)
#myPar<-par(mfrow=c(1,1), oma=c(.5, .5, .5, .5), mai=c(1.2, 1.2, .1, 0))
boxplot(RSDdf.omit$value ~ RSDdf.omit$X2, col=c('red', "blue", "red", "blue"), xlab='', ylab='% RSD', horizontal=F, outline=T, names=names, las = 2)
rm(list=ls()) # removes all prior objects
#project-geoduck-oa
#Data from Roberts et al NOAA OA
#last modified 20160304 H Putnam
rm(list=ls()) # removes all prior objects
#Read in required libraries
library("seacarb") #seawater carbonate chemistry
library("reshape") #reshape data
library("plotrix") #functions in tapply
#############################################################
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/project-geoduck-oa/RAnalysis/Data/") #set working directory
#Required Data files
#pH_Calibration_Files/
#SW_Chem.csv
#Cell_Counts.csv
#Larval_Counts.csv
#Seed_size.csv
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
##### pH Tris Calibration Curves #####
#For conversion equations for pH from mV to total scale using tris standard
path <-("/Users/hputnam/MyProjects/Geoduck_Epi/project-geoduck-oa/RAnalysis/Data/pH_Calibration_Files/")
#list all the file names in the folder to get only get the csv files
file.names<-list.files(path = path, pattern = "csv$")
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=4, dimnames=list(file.names,c("Date", "Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R <- summary(model)$r.squared #extracts the R2
pH.cals[i,2:3] <- coe #inserts coef in the dataframe
pH.cals[i,4] <- R #inserts R2 in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Calib.Date",  "Intercept",  "Slope", "R2")
pH.cals
# read in total alkalinity, temperature, and salinity
SW.chem <- read.csv("SW_Chem_Seed.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#merge with Seawater chemistry file
SW.chem <- merge(pH.cals, SW.chem, by="Calib.Date")
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
F <-96485.339924 #Faraday constant in coulombs mol-1
mvTris <- SW.chem$Temperature*SW.chem$Slope+SW.chem$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-27.5 #salinity of the Tris
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(SW.chem$Temperature+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(SW.chem$Temperature+273.15)-0.11149858*(SW.chem$Temperature+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
SW.chem$pH.Total<-phTris+(mvTris/1000-SW.chem$pH.MV/1000)/(R*(SW.chem$Temperature+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
##### Seacarb Calculations #####
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.output$ALK*1000000 #convert to µmol kg-1
carb.output$CO2 <- carb.output$CO2*1000000 #convert to µmol kg-1
carb.output$HCO3 <- carb.output$HCO3*1000000 #convert to µmol kg-1
carb.output$CO3 <- carb.output$CO3*1000000 #convert to µmol kg-1
carb.output$DIC <- carb.output$DIC*1000000 #convert to µmol kg-1
carb.output <- cbind(SW.chem$Measure.Date,  SW.chem$Tank,  SW.chem$Treatment, carb.output) #combine the sample information with the seacarb output
colnames(carb.output) <- c("Date",  "Tank",  "Treatment",	"flag",	"Salinity",	"Temperature",	"Pressure",	"pH",	"CO2",	"pCO2",	"fCO2",	"HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat", 	"Calcite.Sat") #Rename columns to describe contents
carb.output <- subset(carb.output, select= c("Date",  "Tank",  "Treatment",	"Salinity",	"Temperature",		"pH",	"CO2",	"pCO2",	"HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat"))
##### Descriptive Statistics #####
#Tanks
mean_pCO2=tapply(carb.output$pCO2, carb.output$Tank, mean)
se_pCO2=tapply(carb.output$pCO2, carb.output$Tank, std.error)
mean_Temp=tapply(carb.output$Temperature, carb.output$Tank, mean)
se_Temp=tapply(carb.output$Temperature, carb.output$Tank, std.error)
mean_Sal=tapply(carb.output$Salinity, carb.output$Tank, mean)
se_Sal=tapply(carb.output$Salinity, carb.output$Tank, std.error)
mean_TA=tapply(carb.output$TA, carb.output$Tank, mean)
se_TA=tapply(carb.output$TA, carb.output$Tank, std.error)
mean_pH=tapply(carb.output$pH, carb.output$Tank, mean)
se_pH=tapply(carb.output$pH, carb.output$Tank, std.error)
mean_DIC=tapply(carb.output$DIC, carb.output$Tank, mean)
se_DIC=tapply(carb.output$DIC, carb.output$Tank, std.error)
#Treatments
gmean_pCO2 <- tapply(carb.output$pCO2, carb.output$Treatment, mean)
gse_pCO2 <- tapply(carb.output$pCO2, carb.output$Treatment, std.error)
gmean_Temp <- tapply(carb.output$Temperature, carb.output$Treatment, mean)
gse_Temp <- tapply(carb.output$Temperature, carb.output$Treatment, std.error)
gmean_Sal <- tapply(carb.output$Salinity, carb.output$Treatment, mean)
gse_Sal <- tapply(carb.output$Salinity, carb.output$Treatment, std.error)
gmean_TA <- tapply(carb.output$TA, carb.output$Treatment, mean)
gse_TA <- tapply(carb.output$TA, carb.output$Treatment, std.error)
gmean_pH <- tapply(carb.output$pH, carb.output$Treatment, mean)
gse_pH <- tapply(carb.output$pH, carb.output$Treatment, std.error)
gmean_DIC <- tapply(carb.output$DIC, carb.output$Treatment, mean)
gse_DIC <- tapply(carb.output$DIC, carb.output$Treatment, std.error)
mean.carb.output <- rbind(gmean_pCO2, gse_pCO2, gmean_pH, gse_pH, gmean_Temp, gse_Temp, gmean_Sal, gse_Sal, gmean_TA, gse_TA, gmean_DIC, gse_DIC)
mean.carb.output <- as.data.frame(mean.carb.output)
row.names(mean.carb.output) <- c("mean pCO2", "SE pCO2", "mean pH", "SE pH", "mean Temperature", "SE Temperature", "mean Salinity", "SE Salinity", "mean Total Alkalinity", "SE Total Alkalinity", "mean DIC", "SE DIC")
mean.carb.output$Variables <- row.names(mean.carb.output)
write.table (mean.carb.output, file="/Users/hputnam/MyProjects/Geoduck_Epi/project-geoduck-oa/RAnalysis/Output/Seawater_chemistry_table_Output_Seed.csv", sep=",", row.names = FALSE)
##### Cell Counts #####
cell.counts <- read.csv("Cell_Counts_Seed.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
cell.counts$Avg.Cells <- rowMeans(cell.counts[,c("Count1",  "Count2")], na.rm = TRUE) #calculate average of counts
cell.counts$cells.ml <- cell.counts$Avg.Cells/cell.counts$Volume.Counted #calculate density
#Tanks
mean_cells=tapply(cell.counts$cells.ml, cell.counts$Tank, mean, na.rm = TRUE)
se_cells=tapply(cell.counts$cells.ml, cell.counts$Tank, std.error, na.rm = TRUE)
#Treatments
gmean_cells <- tapply(cell.counts$cells.ml, cell.counts$Treatment, mean, na.rm = TRUE)
gse_cells <- tapply(cell.counts$cells.ml, cell.counts$Treatment, std.error, na.rm = TRUE)
##### Seed Size #####
seed.size <- read.csv("Seed_Size.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
Day.10.size <-subset(seed.size, Day=="Day10")
avg.area <- aggregate(Area ~ Day*Treatment, data=seed.size, mean)
se.area <- aggregate(Area ~ Day*Treatment, data=seed.size, std.error)
Shell.size <- cbind(avg.area, se.area$Area)
Day.10 <-subset(Shell.size, Day=="Day10")
colnames(Day.10) <- c("Day", "Treatment", "avg.area", "se.area")
plot(c(1,3), c(20,30), type="n", xaxt = "n", ylab=expression(paste("Shell Area mm2")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=Day.10$avg.area,uiw=Day.10$se.area, liw=Day.10$se.area,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
m <- lm(Area ~ Treatment, data=Day.10.size)
anova(m)
##### Plot Tank and Treatment mean ± se #####
pdf("/Users/hputnam/MyProjects/Geoduck_Epi/project-geoduck-oa/RAnalysis/Output/running_carbonate_chemistry_tanks_Seed.pdf")
par(cex.axis=0.8, cex.lab=0.8, mar=c(5, 5, 4, 2),mgp=c(3.7, 0.8, 0),las=1, mfrow=c(3,3), oma=c(0,0,2,0))
#Tanks
plot(c(11,16),c(0,6000),type="n",ylab=expression(paste("pCO"["2"])), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_pCO2,uiw=se_pCO2, liw=se_pCO2,add=TRUE,gap=0.001)
plot(c(11,16),c(6.5,8.5),type="n",ylab=expression(paste("pH")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_pH,uiw=se_pH, liw=se_pH,add=TRUE,gap=0.001)
plot(c(11,16),c(12,15),type="n",ylab=expression(paste("Temperature °C")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_Temp,uiw=se_Temp, liw=se_Temp,add=TRUE,gap=0.001)
plot(c(11,16),c(25,29),type="n",ylab=expression(paste("Salinity")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_Sal,uiw=se_Sal, liw=se_Sal,add=TRUE,gap=0.001)
plot(c(11,16),c(1800,2200),type="n",ylab=expression(paste("Total Alkalinity µmol kg"^"-1")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_TA,uiw=se_TA, liw=se_TA,add=TRUE,gap=0.001)
plot(c(11,16),c(1850,2400),type="n",ylab=expression(paste("DIC µmol kg"^"-1")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_DIC,uiw=se_DIC, liw=se_DIC,add=TRUE,gap=0.001)
plot(c(11,16),c(20000,60000),type="n", ylab=expression(paste("Algal Feed (Cells ml"^"-1",")")), xlab=expression(paste("Tank")))
plotCI(x=c(11,12,13,14,15,16), y=mean_cells,uiw=se_cells, liw=se_cells,add=TRUE,gap=0.001)
title("Tank Conditions Juvenile Experiment", outer=TRUE)
dev.off()
pdf("/Users/hputnam/MyProjects/Geoduck_Epi/project-geoduck-oa/RAnalysis/Output/running_carbonate_chemistry_treatments_Seed.pdf")
par(cex.axis=0.8, cex.lab=0.8, mar=c(5, 5, 4, 2),mgp=c(3.7, 0.8, 0),las=1, mfrow=c(3,3), oma=c(0,0,2,0))
#Treatments
plot(c(1,2,3),c(0,6000,6000), xaxt = "n", type="n",ylab=expression(paste("pCO"["2"])), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_pCO2,uiw=gse_pCO2, liw=gse_pCO2,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(6.8,8.5,8.5), xaxt = "n", type="n",ylab=expression(paste("pH")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_pH,uiw=gse_pH, liw=gse_pH,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(13,15,15), xaxt = "n", type="n",ylab=expression(paste("Temperature °C")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_Temp,uiw=gse_Temp, liw=gse_Temp,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(25,29,29), xaxt = "n", type="n",ylab=expression(paste("Salinity")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_Sal,uiw=gse_Sal, liw=gse_Sal,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(1800,2200,2200), xaxt = "n", type="n",ylab=expression(paste("Total Alkalinity µmol kg"^"-1")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_TA,uiw=gse_TA, liw=gse_TA,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(1800,2400,2400), xaxt = "n", type="n",ylab=expression(paste("DIC µmol kg"^"-1")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_DIC,uiw=gse_DIC, liw=gse_DIC,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
plot(c(1,2,3),c(20000,90000,90000), xaxt = "n", type="n", ylab=expression(paste("Algal Feed (Cells ml"^"-1",")")), xlab=expression(paste("Treatment")))
axis(1, at=1:3, labels=c("pH 7.89", "pH 7.38", "pH 7.04"))
plotCI(x=c(1:3), y=gmean_cells,uiw=gse_cells, liw=gse_cells,add=TRUE,gap=0.001, pch=20, col=c("blue", "pink", "red"))
#Seed size
N<-aggregate(N~Treatment*Day,data=seed.size, sum)
boxplot(Area~Treatment*Day,data=seed.size,col=c("blue", "pink", "red"), xaxt = "n", frame.plot=TRUE, ylab=expression(paste("Seed Shell Area mm"^"2")))
axis(1, at=c(5,8), labels=c("Day1", "Day10"))
legend("topleft", c("pH 7.89", "pH 7.38", "pH 7.04"), fill=c("blue", "pink", "red"), bty="n", cex=0.6)
# Add data points
# mylevels<-levels(seed.size$Treatment)
# for(i in 1:length(mylevels))
# {
#   thislevel<-mylevels[i]
#   thisvalues<-seed.size[seed.size$Treatment==thislevel, "Avg.Area"]
#
#   # take the x-axis indices and add a jitter, proportional to the N in each level
#   myjitter<-jitter(rep(i, length(thisvalues)), amount=levelProportions[i]/10)
#   points(myjitter, thisvalues, pch=20, col=rgb(0,0,0,.2))
# }
#
title("Treatment Conditions Juvenile Experiment", outer=TRUE)
dev.off()
#Load WiSH data
wish.data <- read.csv("Wish_data_Seed.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
date.time <- sub("-",",", wish.data$Date...Time)
date.time <- strsplit(date.time, ",")
date.time <- data.frame(matrix(unlist(date.time), nrow=length(date.time), byrow=T),stringsAsFactors=FALSE)
temp.data <- wish.data[,grepl("Tank", colnames(wish.data))] #search for and subset columns containing the header name "Tank"
temp.data <- cbind(date.time, temp.data)
colnames(temp.data) <- c("Date", "Time", "Tank3", "Tank6", "Tank4", "Tank1", "Tank5", "Tank2")
pH.data <-cbind(date.time, wish.data$pH.Exp.Treat...Custom.Value, wish.data$ph.Exp.Control...Custom.Value, wish.data$Header.2...c...Custom.Value, wish.data$Header.1...tr...Custom.Value)
colnames(pH.data) <- c("Date", "Time", "TpH7.38", "TpH7.04", "HpH7.04","HpH7.38")
##plot temp data
plot(temp.data$Tank1,type="l", col="pink", ylab=expression(paste("Temperature °C")), xlab=expression(paste("Time")), ylim=c(10, 20))
lines(temp.data$Tank2, col="lightblue" )
lines(temp.data$Tank3, col="blue")
lines(temp.data$Tank4, col="red")
lines(temp.data$Tank5, col="darkred")
lines(temp.data$Tank6, col="darkblue")
legend("topleft", c("Tank1","Tank2", "Tank3","Tank4","Tank5", "Tank6" ), col=c("pink","lightblue", "blue", "red", "darkred", "darkblue"), bty="n", lwd=1, cex=0.6)
#plot pH Data
plot(pH.data$TpH7.38,type="l", col="lightblue", ylab=expression(paste("pH")), xlab=expression(paste("Time")), ylim=c(6.8, 8.0))
lines(pH.data$TpH7.04, col="pink" )
lines(pH.data$HpH7.38, col="blue" )
lines(pH.data$HpH7.04, col="red" )
legend("topleft", c("Tank Low","Tank Super Low", "Header Low","Header Super Low"), col=c("lightblue","pink", "blue", "red"), bty="n", lwd=1, cex=0.6)
N<-aggregate(N~Treatment*Day,data=seed.size, sum)
boxplot(Area~Treatment*Day,data=seed.size,col=c("blue", "pink", "red"), xaxt = "n", frame.plot=TRUE, ylab=expression(paste("Seed Shell Area mm"^"2")))
axis(1, at=c(5,8), labels=c("Day1", "Day10"))
legend("topleft", c("pH 7.89", "pH 7.38", "pH 7.04"), fill=c("blue", "pink", "red"), bty="n", cex=0.6)
##Examination of DNA Methylation and Phenotypic Plasticity in Corals
#Data from Putnam NSF (NSF OCE PRF-1323822) and EPSCOR Y5 (NSF EPS-0903833)
#last modified 20160130
#See Readme file for details
rm(list=ls()) # removes all prior objects
##Examination of DNA Methylation and Phenotypic Plasticity in Corals
#Data from Putnam NSF (NSF OCE PRF-1323822) and EPSCOR Y5 (NSF EPS-0903833)
#last modified 20160130
#See Readme file for details
rm(list=ls()) # removes all prior objects
#Read in required libraries
##### Include Versions of libraries
library("car") #levenes test
library("ggplot2") #plotting
library("plotrix") #plotting
library("reshape") #data shaping
library("plyr") #splitting, applying, and combining data
library("seacarb") #seawater carbonate chemistry
library("vegan") #calculating distance matrices
library("MetabolAnalyze") #scaling function
source('/Users/hputnam/Publications/In_Review/Bulk_Methylation/Coral_DNAMethylation_Plasticity/R_Analysis/Scripts/opls.R') #OPLS DA analysis script by Paul Anderson used in Sogin et al 2014 (http://birg.cs.cofc.edu/index.php/O-PLS)
library("pracma") #OPLS DA analysis requirements
library("caret") #OPLS DA analysis requirements
require("gridExtra") #Arrange Plots for output
library("muma") #spectral correlation analysis
##Examination of DNA Methylation and Phenotypic Plasticity in Corals
#Data from Putnam NSF (NSF OCE PRF-1323822) and EPSCOR Y5 (NSF EPS-0903833)
#last modified 20160130
#See Readme file for details
rm(list=ls()) # removes all prior objects
#Read in required libraries
##### Include Versions of libraries
library("car") #levenes test
library("ggplot2") #plotting
library("plotrix") #plotting
library("reshape") #data shaping
library("plyr") #splitting, applying, and combining data
library("seacarb") #seawater carbonate chemistry
library("vegan") #calculating distance matrices
library("MetabolAnalyze") #scaling function
source('/Users/hputnam/Publications/In_Review/Bulk_Methylation/Coral_DNAMethylation_Plasticity/R_Analysis/Scripts/opls.R') #OPLS DA analysis script by Paul Anderson used in Sogin et al 2014 (http://birg.cs.cofc.edu/index.php/O-PLS)
library("pracma") #OPLS DA analysis requirements
library("caret") #OPLS DA analysis requirements
require("gridExtra") #Arrange Plots for output
library("muma") #spectral correlation analysis
#Required Data files
#BM_Light_Calibration_Data.csv
#BM_Acclimation.csv
#BM_Field_Temp.csv
#BM_Tank_Temp.csv
#BM_Tank_light.csv
#BM_Daily_Measurements.csv
#BM_SWChem.csv
#BM_NBS_pH.csv
#BM_NMR_Data_0.04binned_truncated_nowater.csv
#BM_NMR_sample_info
#pH probe calibration files : Coral_DNAMethylation_Plasticity/R_Analysis/Data/pH_Calibration_Files/
#BM_Methylation.csv
#BM_Buoyant_Weight.csv
#############################################################
setwd("/Users/hputnam/Publications/In_Review/Bulk_Methylation/Coral_DNAMethylation_Plasticity/R_Analysis/Data") #set working directory
mainDir<-'/Users/hputnam/Publications/In_Review/Bulk_Methylation/Coral_DNAMethylation_Plasticity/R_Analysis/'
#------------------------------------------------
#Light Calibration
Cal.L.data <- read.csv("BM_Light_Calibration.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Light Calibration
Cal.L.data <- read.csv("BM_Light_Calibration_Data.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
Cal.L.data <- read.csv("BM_Light_Calibration_Data.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
View(Cal.L.data)
Cal.L.data <- read.csv("BM_Light_Calibration_Data.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
Cal.L.data$Licor.quanta <- Cal.L.data$Licor.quanta/(15*60)
Cal.L.data$Tank4.quanta <- Cal.L.data$Tank4.quanta/(15*60)
Cal.L.data$Tank5.quanta <- Cal.L.data$Tank5.quanta/(15*60)
Cal.L.data$Licor.quanta <- Cal.L.data$Licor.quanta/(15*60)
View(Cal.L.data)
Cal.L.data$Licor.quanta <- Cal.L.data$Licor.mol.m2/(15*60)
Cal.L.data$Tank4.quanta <- Cal.L.data$Tank4/(15*60)
Cal.L.data$Tank5.quanta <- Cal.L.data$Tank5/(15*60)
View(Cal.L.data)
?lm
T4.lm <- lm(Tank4.quanta ~ Licor.quanta, data=Cal.L.data)
T5.lm <- lm(Tank5.quanta ~ Licor.quanta, data=Cal.L.data)
T4.lm
T5.lm
T4.lm$coefficients
T4.lm <- coefficients(lm(Tank4.quanta ~ Licor.quanta, data=Cal.L.data))
T4.lm
Tanks <- c("Tank3", "Tank4", "Tank5")
Cal.L.data <- read.csv("BM_Light_Calibration_Data.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
Cal.L.data$Licor.quanta <- Cal.L.data$Licor.mol.m2/(15*60)
Cal.L.data$Tank3.quanta <- Cal.L.data$Tank3/(15*60)
Cal.L.data$Tank4.quanta <- Cal.L.data$Tank4/(15*60)
Cal.L.data$Tank5.quanta <- Cal.L.data$Tank5/(15*60)
View(Cal.L.data)
Tanks <- c("Tank3.quanta", "Tank4.quanta", "Tank5.quanta")
L.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=4, dimnames=list(file.names,c("Date", "Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(tanks)) { # for every file in list start at the first and run this following function
Calib.Data <-Cal.L.data #reads in the data files
model <-lm(Tanks ~ Licor.quanta, data=Cal.L.data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R <- summary(model)$r.squared #extracts the R2
L.cals[i,2:3] <- coe #inserts coef in the dataframe
L.cals[i,4] <- R #inserts R2 in the dataframe
L.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
for(i in 1:length(Tanks)) { # for every file in list start at the first and run this following function
Calib.Data <-Cal.L.data #reads in the data files
model <-lm(Tanks ~ Licor.quanta, data=Cal.L.data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R <- summary(model)$r.squared #extracts the R2
L.cals[i,2:3] <- coe #inserts coef in the dataframe
L.cals[i,4] <- R #inserts R2 in the dataframe
L.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
Tanks <- c("Tank3.quanta", "Tank4.quanta", "Tank5.quanta")
L.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=4, dimnames=list(file.names,c("Date", "Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
L.cals <- data.frame(matrix(NA, nrow=length(Tanks), ncol=4, dimnames=list(file.names,c("Date", "Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
L.cals <- data.frame(matrix(NA, nrow=length(Tanks), ncol=4, dimnames=list(Tanks,c("Date", "Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
View(L.cals)
Cal.L.data <- read.csv("BM_Light_Calibration_Data.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
Cal.L.data$Licor.quanta <- Cal.L.data$Licor.mol.m2/(15*60)
Cal.L.data$Tank3.quanta <- Cal.L.data$Tank3/(15*60)
Cal.L.data$Tank4.quanta <- Cal.L.data$Tank4/(15*60)
Cal.L.data$Tank5.quanta <- Cal.L.data$Tank5/(15*60)
Tanks <- c("Tank3.quanta", "Tank4.quanta", "Tank5.quanta")
L.cals <- data.frame(matrix(NA, nrow=length(Tanks), ncol=3, dimnames=list(Tanks,c("Intercept", "Slope","R2")))) #generate a 3 column dataframe with specific column names
View(L.cals)

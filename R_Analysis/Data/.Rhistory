#Montipora OPLS Data
MC.X<-as.matrix(cleaned.MC.data) #select data for analysis
class(MC.X)<-'numeric' #changes class data to numeric
MC.Y<-as.matrix(as.numeric(as.factor(as.vector(cleaned.MC.info$Treatment)))) #select the grouping factor
MC.ulabels <- unique(as.vector(cleaned.MC.info$Treatment)) #identify labels
set.seed(10) #sets the value on the uniform random-number generator so that the analysis can be reproduced every time
MC.resultsALL<-n.group.opls(MC.X,MC.Y, num_permutations=100, CV= 10, nIterations=100, min_num_OPLS_fact=1) #runs OPLS-DA model (Anderson)
MC.Q2<-MC.resultsALL$Q2 #identify Q2 Values
MC.pval<-MC.resultsALL$helper.results$pvalue #identify pvalue for the model
MC.modelALL <- MC.resultsALL$helper.results$model #identify model results
MC.OPLSResults<-data.frame(model=c('M. capitata'), Q2=c(MC.Q2), pval=c(MC.pval)) #combine model, Q2 and p value
MC.OPLSResults #view results
#determine significant features contributing to species separation in OPLS analysis
MC.bins <- colnames(MC.X) #list all bin names
MC.sig_features_results <- determine_significant_features(MC.X,MC.Y, MC.modelALL,num_permutations,talpha,inside_num_permutations,inside_talpha) #determine significant features contributing to OPLS-DA separation
MC.sig_metabolites<- MC.bins[MC.sig_features_results$sig_inxs] #identify significant features from analysis results
#calculating percent change of bins between species
MC.High <-colMeans(subset(cleaned.MC.data, cleaned.MC.info$Treatment=='High')) #Select only the Montipora data from the dataset from which outliers have been removed.
MC.Amb <-colMeans(subset(cleaned.MC.data, cleaned.MC.info$Treatment=='Ambient')) #Select only the Montipora data from the dataset from which outliers have been removed.
Perch.MC<-as.data.frame(((MC.High-MC.Amb)/MC.Amb)*100) #calculate relative percent change of the bins between treatment
#loading scores and percent change of SigMetabolites
MC.SigMetabolites<-data.frame(metabolite=MC.sig_metabolites,perchange=Perch.MC[MC.sig_metabolites,]) #make a dataframe of sig bins and their relative percent change
MC.t_loads<-MC.modelALL$p #identify sig values to the OPLS-DA
MC.names<-rownames(MC.t_loads) #IDs of the loading values
MC.indxs<-which(names %in% MC.sig_metabolites) #identify index values for all sig bins
MC.SigLoads<-data.frame(metabolite=MC.bins,loads=MC.t_loads[MC.bins, ]) #combine bins and loadings
MC.SigMetabolites<-data.frame(metabolite=MC.sig_metabolites,perchange=Perch.MC[MC.sig_metabolites,]) #combine bins and relative percent change
MC.SigMet<-merge(MC.SigLoads, MC.SigMetabolites, by='metabolite') #combine bins, loadings, and relative percent change
MC.SigMet<-MC.SigMet[order(-abs(MC.SigMet[,'loads'])),] #order by absolute value of the loadings
setwd(file.path(mainDir, 'Output')) #set output destination
write.csv(MC.SigMet, 'Table_S2_SigMetabolites_Mcapitata_Treatment_OPLSDA.csv') #write results to file
#Peak Correlation detection for ID in Chenomx
#Correlate peaks of significant bin with other bins to extract and identify metabolite peaks
Sig.MC.Bin <- cleaned.MC.data[,colnames(cleaned.MC.data)%in% MC.sig_metabolites] #data matrix with only significant bins
cleaned.MC.data #data matrix of all bins
MC.corr <- cor(as.matrix(Sig.MC.Bin), as.matrix(cleaned.MC.data))
barplot(MC.corr[1,])
#visualize
MC.t.opls <- as.numeric(as.vector(MC.modelALL$t)) #assign numeric t values from OPLS results
MC.t.ortho.opls <- as.numeric(as.vector(MC.modelALL$t_ortho)) #assign numeric t-orthogonal values from OPLS results
MC.metabo.data <- data.frame(cleaned.MC.Treat, MC.t.opls, MC.t.ortho.opls) #create a dataframe
colnames(MC.metabo.data) <- c("Treatment", "t", "t.ortho") #Rename columns
Fig14 <- ggplot(MC.metabo.data, aes(t, t.ortho)) +
geom_point(aes(x=t, y=t.ortho, colour=Treatment)) +
scale_colour_manual("Treatment", values = c("blue","red")) + #Set colors for Species
xlim(-1600, 1600) +
ylim(-2500, 2500) +
ggtitle("B  Montipora capitata") + #Label graph
xlab("t") + #Label the X Axis
ylab("t-Orthogonal") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position="top", #Set position of legend in graphic
plot.title=element_text(hjust=0, face="bold.italic")) #Justify the title to the top left and use Bold italics font
Fig14  #View figure
#POCILLIPORA OUTLIER CHECK
PD.data <-subset(cleaned.all.data, cleaned.all.info$Species=='Pocillopora damicornis') #Select only the Pocillopora data from the dataset from which outliers have been removed.
PD.info<-subset(cleaned.all.info, cleaned.all.info$Species=='Pocillopora damicornis') #Select only the Pocillopora info
which(colSums(PD.data) ==0) #check to see if any bins (columns) are present in the whole analysis, but not in Pocillopora only
PD.data <- PD.data [, colSums(PD.data  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.data) ==0) #check again for any zero columns
#assign treatment from info
PD.Treatment <- PD.info$Treatment
#Scale the data
PD.NMRData.scale <- scaling(PD.data, type="pareto")
#Mean center the data
PD.NMRData.scale <- scale(PD.NMRData.scale, center=TRUE, scale=FALSE)
#calculate similarity matrix of euclidean distance
PD.dist.euc <- vegdist(PD.NMRData.scale, method = "euclidean", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE) #calculates euclidean distance on the transformed data matrix
PD.pca.res <- prcomp(PD.dist.euc, retx=TRUE)
summary(PD.pca.res)
biplot(PD.pca.res)
ordiellipse(PD.pca.res,group=rep(c(1), c(length(PD.Treatment))), conf=0.99, kind='sd', draw='lines')
#remove outliers and assess sample size
cleaned.PD.data <- PD.NMRData.scale[-c(17),] #remove outliers identified in PCA
cleaned.PD.info <- PD.info[-c(17),] #remove sample info of outliers identified in PCA
cleaned.PD.Treat <- cleaned.PD.info$Treatment #Set the treatment information for the filtered data
PD.counts <- aggregate(cleaned.PD.info["Coral.ID"], by=cleaned.PD.info[c("Species","Treatment")], FUN=length) #check the sample size for each Treatment
PD.counts #view the sample size for each Treatment
#calculate similarity matrix of euclidean distance
PD.dist.euc <- vegdist(cleaned.PD.data, method = "euclidean", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = TRUE) #calculates euclidean distance on the transformed data matrix
PD.pca.res <- prcomp(PD.dist.euc, retx=TRUE)
summary(PD.pca.res)
#Double check for outliers
biplot(PD.pca.res)
ordiellipse(PD.pca.res,group=rep(c(1), c(length(cleaned.PD.Treat))), conf=0.99, kind='sd', draw='lines')
# extract all PCs
PD.scores <- as.data.frame(PD.pca.res$x)
PD.PCA.plot <- ggplot(PD.scores, aes(x = PC1, y = PC2, shape=cleaned.PD.Treat, col=cleaned.PD.Treat)) +
geom_point(size=4) + # use points +
scale_shape_manual(values=c(17,17)) + #create your own scale and values for scale
theme(panel.background = element_rect(fill='white', colour='black')) + #removes gray background
theme(panel.grid.major = element_line(colour="white"), panel.grid.minor = element_line(colour="white")) + #Set the panel gridlines
theme(legend.key = element_rect(fill='white')) + #Set plot legend key
theme(panel.border = element_rect(fill=NA, size = 1, colour = "black")) + #Set the border
ggtitle("P. damicornis")
PD.PCA.plot
PD.X<-as.matrix(cleaned.PD.data) #SELECT DATA -- USER INPUT
class(PD.X)<-'numeric' #changes class data to numeric
PD.Y<-as.matrix(as.numeric(as.factor(as.vector(cleaned.PD.info$Treatment)))) #SELECT GROUPING -- USER INPUT BY CHANGING COLUMN USED
PD.ulabels <- unique(as.vector(cleaned.PD.info$Treatment)) #PICK LABELS
set.seed(10)
PD.resultsALL<-n.group.opls(PD.X,PD.Y, num_permutations=100, CV= 10, nIterations=100, min_num_OPLS_fact=1) #RUNS MODEL
PD.Q2<-PD.resultsALL$Q2 #GIVES Q2 VALUE
PD.pval<-PD.resultsALL$helper.results$pvalue #GIVES P-VALUE FOR MODEL
PD.modelALL <- PD.resultsALL$helper.results$model
PD.OPLSResults<-data.frame(model=c('P. damicornis'), Q2=c(PD.Q2), pval=c(PD.pval))
PD.OPLSResults #View Results
#determine significant features contributing to species separation in OPLS analysis
PD.bins <- colnames(PD.X)
PD.sig_features_results <- determine_significant_features(PD.X,PD.Y, PD.modelALL,num_permutations,talpha,inside_num_permutations,inside_talpha)
PD.sig_metabolites<- PD.bins[PD.sig_features_results$sig_inxs]
#calculating percent change of bins between treatments for the cleaned, scaled and centered data
PD.High <-colMeans(subset(cleaned.PD.data, cleaned.PD.info$Treatment=='High')) #Select only the Montipora data from the dataset from which outliers have been removed.
PD.Amb <-colMeans(subset(cleaned.PD.data, cleaned.PD.info$Treatment=='Ambient')) #Select only the Montipora data from the dataset from which outliers have been removed.
Perch.PD<-as.data.frame(((PD.High-PD.Amb)/PD.Amb)*100)
#loading scores and percent change of SigMetabolites
PD.SigMetabolites<-data.frame(metabolite=PD.sig_metabolites,perchange=Perch.PD[PD.sig_metabolites,])
PD.t_loads<-PD.modelALL$p
PD.names<-rownames(PD.t_loads)
PD.indxs<-which(names %in% PD.sig_metabolites)
PD.SigLoads<-data.frame(metabolite=PD.bins,loads=PD.t_loads[PD.bins, ])
PD.SigMetabolites<-data.frame(metabolite=PD.sig_metabolites,perchange=Perch.PD[PD.sig_metabolites,])
PD.SigMet<-merge(PD.SigLoads, PD.SigMetabolites, by='metabolite')
PD.SigMet<-PD.SigMet[order(-abs(PD.SigMet[,'loads'])),]
setwd(file.path(mainDir, 'Output'))
write.csv(PD.SigMet, 'Table_S3_SigMetabolites_Pdamicornis_Treatment_OPLSDA.csv')
#Peak Correlation detection for ID in Chenomx
#Correlate peaks of significant bin with other bins to extract and identify metabolite peaks
Sig.PD.Bin <- cleaned.PD.data[,colnames(cleaned.PD.data)%in% PD.sig_metabolites] #data matrix with only significant bins
cleaned.PD.data #data matrix of all bins
PD.corr <- cor(as.matrix(Sig.PD.Bin), as.matrix(cleaned.PD.data))
barplot(PD.corr[1,])
#visualize
PD.t.opls <- as.numeric(as.vector(PD.modelALL$t)) #assign numeric t values from OPLS results
PD.t.ortho.opls <- as.numeric(as.vector(PD.modelALL$t_ortho)) #assign numeric t-orthogonal values from OPLS results
PD.metabo.data <- data.frame(cleaned.PD.Treat, PD.t.opls, PD.t.ortho.opls) #create a dataframe
colnames(PD.metabo.data) <- c("Treatment", "t", "t.ortho") #Rename columns
Fig15 <- ggplot(PD.metabo.data, aes(t, t.ortho)) +
geom_point(aes(x=t, y=t.ortho, colour=Treatment)) +
scale_colour_manual("Treatment", values = c("blue","red")) + #Set colors for Species
xlim(-1600, 1600) +
ylim(-2500, 2500) +
ggtitle("C  Pocillopora damicornis") + #Label graph
xlab("t") + #Label the X Axis
ylab("t-Orthogonal") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
legend.position="top", #Set position of legend in graphic
plot.title=element_text(hjust=0, face="bold.italic")) #Justify the title to the top left and use Bold italics font
Fig15  #View figure
#Calculate % RSD
#subset data by species and treatment use NMRData.norm (inout data file with negative values replaced with 0s)
MC.list <- cleaned.MC.info$Coral.ID #list of clean coral IDs
PD.list <- cleaned.PD.info$Coral.ID #list of clean coral IDs
MC.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='High') #Montipora
MC.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% MC.list & metabo.info$Treatment=='Ambient') #Montipora
PD.high <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='High') #Pocillopora
PD.amb <- subset(NMRData.norm, metabo.info$Coral.ID %in% PD.list & metabo.info$Treatment=='Ambient') #Pocillopora
#remove columns with no data
which(colSums(MC.high) ==0) #check to see if any bins (columns) with no data are present
MC.high <- MC.high [, colSums(MC.high  != 0) > 0] #remove the coloumns that have zeros
which(colSums(MC.high) ==0) #check again for any zero columns
which(colSums(MC.amb) ==0) #check to see if any bins (columns) with no data are present
MC.amb <- MC.amb [, colSums(MC.amb  != 0) > 0] #remove the coloumns that have zeros
which(colSums(MC.amb) ==0) #check again for any zero columns
which(colSums(PD.high) ==0) #check to see if any bins (columns) with no data are present
PD.high <- PD.high [, colSums(PD.high  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.high) ==0) #check again for any zero columns
which(colSums(PD.amb) ==0) #check to see if any bins (columns) with no data are present
PD.amb <- PD.amb [, colSums(PD.amb  != 0) > 0] #remove the coloumns that have zeros
which(colSums(PD.amb) ==0) #check again for any zero columns
#Calculated RSD BY SPECIES and Treatment:  %RSD = (bin sd / bin mean) * 100
MC.RSD.high <-(apply(MC.high,2, sd)/colMeans(MC.high)*100) #calculate %RSD
MC.RSD.amb <-(apply(MC.amb,2, sd)/colMeans(MC.amb)*100) #calculate %RSD
range(MC.RSD.high) #view range RSD
range(MC.RSD.amb) #view range RSD
PD.RSD.high <-(apply(PD.high,2, sd)/colMeans(PD.high)*100) #calculate %RSD
PD.RSD.amb <-(apply(PD.amb,2, sd)/colMeans(PD.amb)*100) #calculate %RSD
range(PD.RSD.high) #view range RSD
range(PD.RSD.amb) #view range RSD
df.m<-melt(cbind(MC.RSD.high, MC.RSD.amb, PD.RSD.high, PD.RSD.amb)) #combines and melts data into long format
RSDdf.omit<-na.omit(df.m) #removes NA values
shapiro.test(RSDdf.omit$value) # checks for normality: non-normal data
hist(RSDdf.omit$value)
RSD.result <-kruskal.test(RSDdf.omit$value, RSDdf.omit$X2, p.adj='bonferroni') #performs Kruskal_walis One Way Analysis of Variance
RSD.result
MC.RSD.H.data <- subset(RSDdf.omit, RSDdf.omit$X2=="MC.RSD.high")
MC.RSD.A.data <- subset(RSDdf.omit, RSDdf.omit$X2=="MC.RSD.amb")
MC.RSD.data <- rbind(MC.RSD.H.data,MC.RSD.A.data)
Names <- c("Ambient", "High", "Ambient", "High")
Fig.RSD <- ggplot(RSDdf.omit, aes(X2, value)) +
geom_boxplot(data=RSDdf.omit, aes(X2, value, fill=X2)) +
xlab("Treatment") + #Label the X Axis
ylab("% RSD") + #Label the Y Axis
ylim(0,500) + #set the y axis limit
theme_bw() + #Set the background color
scale_fill_manual(values=c("blue", "red","blue", "red")) + #set plot colors
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.position="none") + #remove legend
scale_x_discrete(breaks=c("MC.RSD.amb","MC.RSD.high","PD.RSD.amb","PD.RSD.high"), labels=c("M. capitata", "M. capitata", "P. damicornis","P. damicornis"))
Fig.RSD
#------------------------------------------------
#Growth Analysis
setwd(file.path(mainDir, 'Data')) #set data path
#load weight data
weight <- read.csv("BM_Buoyant_Weight_Repeated.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
PD.Arag <- 2.78 #g cm-3, set aragonite density for Pocillopora from literature
MC.Arag <- 2.03 #g cm-3, set aragonite density for Montipora from literature
#Pocillopora Arag = 2.78 g cm-3 Spencer-Davies 1989 Mar Bio 101:389-395, Al-Sofyani and Floos 2013 Oecologia 55:917-935
#Montipora Arag = 2.03 g cm-3 average from table 2 in Anthony 2003 Functional Ecology 17:246-259
#TimeInitial date=20140501
Temp0 <- 23.92 #Temperature of the measurement
RefDry0 <- 39.110 #weight of solid glass dry reference in air
RefSW0 <- 21.129 #weight of solid glass reference in seawater
RefFW0 <- 21.582 #weight of solid glass reference in freshwater
DenFW0 <- ((-0.000005*Temp0*Temp0)+(0.000007*Temp0)+1.0001) #g cm-3 Calculates density of the freshwater as a function of temperature
DenRef0 <- ((RefDry0*DenFW0)/(RefDry0-RefFW0)) #g cm-3 Equation 4 from Spencer Davies 1989 calculates the density of the reference weight
DenSW0 <- ((DenRef0*(RefDry0-RefSW0))/(RefDry0))  #g cm-3 Equation 3 from Spencer Davies 1989 using the density of the calcualted reference weight
#Week2 date=20140515
Temp2 <- 25.45 #Temperature of the measurement
RefDry2 <- 39.111 #weight of solid glass dry reference in air
RefSW2 <- 21.137 #weight of solid glass reference in seawater
RefFW2 <- 21.595 #weight of solid glass reference in freshwater
DenFW2 <- ((-0.000005*Temp2*Temp2)+(0.000007*Temp2)+1.0001) #g cm-3 Calculates density of the freshwater as a function of temperature
DenRef2 <- ((RefDry2*DenFW2)/(RefDry2-RefFW2)) #g cm-3 Equation 4 from Spencer Davies 1989 calculates the density of the reference weight
DenSW2 <- ((DenRef2*(RefDry2-RefSW2))/(RefDry2))  #g cm-3 Equation 3 from Spencer Davies 1989 using the density of the calcualted reference weight
#Week4 date=20140529
Temp4 <- 25.72 #Temperature of the measurement
RefDry4 <- 39.112 #weight of solid glass dry reference in air
RefSW4 <- 21.148 #weight of solid glass reference in seawater
RefFW4 <- 21.582 #weight of solid glass reference in freshwater
DenFW4 <- ((-0.000005*Temp4*Temp4)+(0.000007*Temp4)+1.0001) #g cm-3 Calculates density of the freshwater as a function of temperature
DenRef4 <- ((RefDry4*DenFW4)/(RefDry4-RefFW4)) #g cm-3 Equation 4 from Spencer Davies 1989 calculates the density of the reference weight
DenSW4 <- ((DenRef4*(RefDry4-RefSW4))/(RefDry4))  #g cm-3 Equation 3 from Spencer Davies 1989 using the density of the calcualted reference weight
#Week6 date=20140612
Temp6 <- 26.24 #Temperature of the measurement
RefDry6 <- 39.110 #weight of solid glass dry reference in air
RefSW6 <- 21.128 #weight of solid glass reference in seawater
RefFW6 <- 21.572 #weight of solid glass reference in freshwater
DenFW6 <- ((-0.000005*Temp6*Temp6)+(0.000007*Temp6)+1.0001) #g cm-3 Calculates density of the freshwater as a function of temperature
DenRef6 <- ((RefDry6*DenFW6)/(RefDry6-RefFW6)) #g cm-3 Equation 4 from Spencer Davies 1989 calculates the density of the reference weight
DenSW6 <- ((DenRef6*(RefDry6-RefSW6))/(RefDry6))  #g cm-3 Equation 3 from Spencer Davies 1989 using the density of the calcualted reference weight
days <- 14 #number of days between weighings
MC.weight <-subset(weight, weight$Species=='Montipora capitata') #subset MC data to apply MC specific skeletal density
PD.weight <-subset(weight, weight$Species=='Pocillopora damicornis') #subset MC data to apply MC specific skeletal density
PD.DryWeight1 <- ((PD.weight$Final_01May)/(1-(DenSW0/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.DryWeight2 <- ((PD.weight$Initial_15May)/(1-(DenSW2/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.DryWeight3 <- ((PD.weight$Final_15May)/(1-(DenSW2/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.DryWeight4 <- ((PD.weight$Initial_29May)/(1-(DenSW4/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.DryWeight5 <- ((PD.weight$Final_29May)/(1-(DenSW4/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.DryWeight6 <- ((PD.weight$Initial_12June)/(1-(DenSW6/PD.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
PD.G.week2 <- ((PD.DryWeight2-PD.DryWeight1)/(PD.DryWeight1))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
PD.G.week4 <- ((PD.DryWeight4-PD.DryWeight3)/(PD.DryWeight3))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
PD.G.week6 <- ((PD.DryWeight6-PD.DryWeight5)/(PD.DryWeight5))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
PD.G.data <- cbind(PD.weight,PD.G.week2,PD.G.week4,PD.G.week6) #combine growth rate data and metadata
colnames(PD.G.data) <- c("Species",  "Coral.ID",  "Treatment",	"Initial_01May",	"Final_01May",	"Initial_15May",	"Final_15May",	"Initial_29May",	"Final_29May",	"Initial_12June",	"Week2",	"Week4",	"Week6")
#Montipora Dry Weight
#Subset weights by species
MC.DryWeight1 <- ((MC.weight$Final_01May)/(1-(DenSW0/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.DryWeight2 <- ((MC.weight$Initial_15May)/(1-(DenSW2/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.DryWeight3 <- ((MC.weight$Final_15May)/(1-(DenSW2/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.DryWeight4 <- ((MC.weight$Initial_29May)/(1-(DenSW4/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.DryWeight5 <- ((MC.weight$Final_29May)/(1-(DenSW4/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.DryWeight6 <- ((MC.weight$Initial_12June)/(1-(DenSW6/MC.Arag))) #calculate dry weight Spencer Davies 1989 Eq 4
MC.G.week2 <- ((MC.DryWeight2-MC.DryWeight1)/(MC.DryWeight1))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
MC.G.week4 <- ((MC.DryWeight4-MC.DryWeight3)/(MC.DryWeight3))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
MC.G.week6 <- ((MC.DryWeight6-MC.DryWeight5)/(MC.DryWeight5))*100/(days) #calculate growth rate in % growth per day normalized to initial mass
MC.G.data <- cbind(MC.weight,MC.G.week2,MC.G.week4,MC.G.week6) #combine growth rate data and metadata
colnames(MC.G.data) <- c("Species",  "Coral.ID",	"Treatment",	"Initial_01May",	"Final_01May",	"Initial_15May",	"Final_15May",	"Initial_29May",	"Final_29May",	"Initial_12June",	"Week2",	"Week4",	"Week6")
growth.rate <-rbind(MC.G.data,PD.G.data)
G.counts.2 <- aggregate(growth.rate["Week2"], by=growth.rate[c("Species","Treatment")], FUN=length)
G.means.2 <- aggregate(Week2 ~ Species + Treatment, data=growth.rate, mean, na.rm = TRUE)
G.se.2 <- aggregate(Week2 ~ Species + Treatment, data=growth.rate, std.error, na.rm = TRUE)
G.means.2 <- cbind(G.means.2, G.se.2$Week2)
G.means.2$Time <- c("Week2")
colnames(G.means.2) <- c("Species", "Treatment", "Mean", "SE", "Time")
G.means.2
G.counts.4 <- aggregate(growth.rate["Week4"], by=growth.rate[c("Species","Treatment")], FUN=length)
G.means.4 <- aggregate(Week4 ~ Species + Treatment, data=growth.rate, mean, na.rm = TRUE)
G.se.4 <- aggregate(Week4 ~ Species + Treatment, data=growth.rate, std.error, na.rm = TRUE)
G.means.4 <- cbind(G.means.4, G.se.4$Week4)
G.means.4$Time <- c("Week4")
colnames(G.means.4) <- c("Species", "Treatment", "Mean", "SE", "Time")
G.means.4
G.counts.6 <- aggregate(growth.rate["Week6"], by=growth.rate[c("Species","Treatment")], FUN=length)
G.means.6 <- aggregate(Week6 ~ Species + Treatment, data=growth.rate, mean, na.rm = TRUE)
G.se.6 <- aggregate(Week6 ~ Species + Treatment, data=growth.rate, std.error, na.rm = TRUE)
G.means.6 <- cbind(G.means.6, G.se.6$Week6)
G.means.6$Time <- c("Week6")
colnames(G.means.6) <- c("Species", "Treatment", "Mean", "SE", "Time")
G.means.6
PH
G <- rbind(G.means.2, G.means.4, G.means.6)
G$TS <- c("MC Amb", "PD Amb", "MC High", "PD High","MC Amb", "PD Amb", "MC High", "PD High","MC Amb", "PD Amb", "MC High", "PD High")
Fig16 <- ggplot(G, aes(x=Time, y=Mean, group=TS), position="dodge") +
geom_errorbar(aes(ymin=G$Mean-G$SE, ymax=G$Mean+G$SE), colour="black", width=.1) +
geom_point(aes(shape=Species), size = 4) +
geom_line(aes(linetype=Treatment), size = 0.5) +
xlab("Time") + #Label the X Axis
ylab("Growth % per Day") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank()) #Set plot legend key
Fig16
###Repeated Measures ANOVA
G.RM <- growth.rate[,c(1,3,11:13)] #subset factor and growth data
G.RM <- melt(G.RM) #reshape into long format
G.RM$Subject <- rep(1:94, times=3) #add subject IDs
Growth.RM.lme <- lme((sqrt(value+1)) ~ variable*Treatment*Species, random = ~ variable|Subject, data=na.omit(G.RM)) #repeated measures ANOVA with random intercept but not slope (clonal fragments expect to respond the same)
Growth.results <- summary(Growth.RM.lme) #view RM ANOVA summary
Growth.stats <- anova(Growth.RM.lme) #view F and p values
Growth.RM.posthoc <- lsmeans(Growth.RM.lme, specs=c("variable","Treatment","Species")) #calculate MS means
Growth.RM.posthoc #view results
Growth.RM.posthoc.p <- contrast(Growth.RM.posthoc, method="pairwise", by=c("Species","variable")) #contrast treatment groups within a species at each time point
Growth.RM.posthoc.p #view results
###Testing ANOVA Assumptions
###Data are normally distributed
hist(RM.lme$residuals) #histogram
qqnorm(RM.lme$residuals) # normal quantile plot
#calculate backtransformed means and SE
G.RM$rate.trans <- sqrt(G.RM$value+1)
growth.trans.avg <- aggregate(rate.trans  ~ Species + Treatment + variable, data=G.RM, mean, na.rm = TRUE) #calculate the averages by Species and Treatment
growth.trans.se <- aggregate(rate.trans  ~ Species + Treatment + variable, data=G.RM, std.error, na.rm = TRUE) #calculate the standard errors by Species and Treatment
growth.trans.std <- aggregate(rate.trans  ~ Species + Treatment + variable, data=G.RM, sd, na.rm = TRUE) #calculate the standard deviation by Species and Treatment
growth.trans <- growth.trans.avg #generate dataframe of averages
colnames(growth.trans) <- c("Species", "Treatment", "Time", "avg")
growth.trans$Upper <- growth.trans$avg+growth.trans.se$rate.trans
growth.trans$Lower <- growth.trans$avg-growth.trans.se$rate.trans
back.trans.growth <- growth.trans
back.trans.growth$avg <- ((growth.trans$avg)^2)-1
back.trans.growth$Upper <- ((growth.trans$Upper)^2)-1
back.trans.growth$Lower <- ((growth.trans$Lower)^2)-1
back.trans.growth$TS <- c("MC Amb", "PD Amb", "MC High", "PD High","MC Amb", "PD Amb", "MC High", "PD High","MC Amb", "PD Amb", "MC High", "PD High")
#Plot backtransformed means and SE
Fig17 <- ggplot(back.trans.growth, aes(x=Time, y=avg, group=TS), position="dodge") +
geom_errorbar(aes(ymin=back.trans.growth$Lower, ymax=back.trans.growth$Upper), colour="black", width=.1) +
geom_point(aes(shape=Species), size = 4) +
geom_line(aes(linetype=Treatment), size = 0.5) +
xlab("Time") + #Label the X Axis
ylab("Growth % per Day") + #Label the Y Axis
ggtitle("A") + #set plot title
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.title=element_text(size=14,face="bold"), #Set axis format
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0))
Fig17
#------------------------------------------------
#DNA METHYLATION ANALYSIS
#load DNA Methylation data
data <- read.csv("BM_Methylation.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
data <- na.omit(data) #omit data rows that include NA
counts <- aggregate(data["Methylation"], by=data[c("Species","Treatment")], FUN=length) #count the sample sizes
avg <- aggregate(Methylation ~ Species + Treatment, data=data, mean, na.rm = TRUE) #calculate the averages by Species and Treatment
se <- aggregate(Methylation ~ Species + Treatment, data=data, std.error, na.rm = TRUE) #calculate the standard errors by Species and Treatment
methyl <- cbind(avg, se$Methylation) #generate dataframe of averages and standard errors
colnames(methyl) <- c("Species", "Treatment", "avg", "se" ) #rename columns of dataframe
Fig18 <- ggplot(data=methyl, aes(x=factor(Species), y=(avg), fill=Treatment)) + #plot methylation data averages
geom_bar()+
geom_bar(stat="identity", position=position_dodge(), #use values and offset position so bars don't overlap
colour="black", # set line color,
size=.3, #set line weight
show_guide=FALSE) + #remove slash from legend
scale_fill_manual(values=c("blue", "red")) + #set fill color for bars
geom_errorbar(aes(ymin=avg-se, ymax=avg+se), #plot standard errors
width=.2,                    # set width of the error bars
position=position_dodge(.9)) + #offset position so bars don't overlap
ggtitle("B") + #set plot title
xlab("Species") + #Label the X Axis
ylab("% DNA Methylation")+ #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig18 #View figure
###Testing ANOVA Assumptions
methylation.results <- aov((Methylation^0.25) ~Treatment * Species, data=data)
methylation.stats <- anova(methylation.results)
###Testing ANOVA Assumptions
###Homogeneity of variance
#get unstandardized predicted and residual values
unstandardizedPredicted <- predict(methylation.results)
unstandardizedResiduals <- resid(methylation.results)
#get standardized values and plot to determine homogeneity
standardizedPredicted <- (unstandardizedPredicted - mean(unstandardizedPredicted)) / sd(unstandardizedPredicted)
standardizedResiduals <- (unstandardizedResiduals - mean(unstandardizedResiduals)) / sd(unstandardizedResiduals)
#create standardized residuals plot
plot(standardizedPredicted, standardizedResiduals, main = "Standardized Residuals Plot", xlab = "Standardized Predicted Values", ylab = "Standardized Residuals")
#add horizontal line
abline(0,0)
leveneTest((Methylation^0.33) ~Treatment * Species, data=data)
###Data are normally distributed
results.stdres <- rstandard(methylation.results)
qqnorm(results.stdres) # normal quantile plot
qqline(results.stdres) # adding a qline of comparison
shapiro.test(results.stdres) #runs a normality test using shapiro-wilk test on the standardized residuals
methylation.HSD <- TukeyHSD(methylation.results, ordered = FALSE, conf.level = 0.95) #calculate pairwise differences between groups using Tukey's HSD Test
methylation.HSD #View results
MCPDavg <- aggregate(Methylation ~ Species, data=data, mean, na.rm = TRUE) #Calculate methylation average for each species
MCPDavg #View results
#calculate backtransformed means and SE
data$Methylation.trans <- (data$Methylation)^0.25
sp.trans.avg <- aggregate(Methylation.trans ~ Species, data=data, mean, na.rm = TRUE) #calculate the averages by Species
sp.backtrans.avg <- (sp.trans.avg$Methylation.trans)^4 #backtransform the average
trans.avg <- aggregate(Methylation.trans ~ Species + Treatment, data=data, mean, na.rm = TRUE) #calculate the averages by Species and Treatment
trans.se <- aggregate(Methylation.trans ~ Species + Treatment, data=data, std.error, na.rm = TRUE) #calculate the standard errors by Species and Treatment
trans.std <- aggregate(Methylation.trans ~ Species + Treatment, data=data, sd, na.rm = TRUE) #calculate the standard deviation by Species and Treatment
trans.methyl <- trans.avg #generate dataframe of averages
colnames(trans.methyl) <- c("Species", "Treatment", "avg")
trans.methyl$Upper <- trans.methyl$avg+trans.se$Methylation.trans
trans.methyl$Lower <- trans.methyl$avg-trans.se$Methylation.trans
back.trans.methyl <- trans.methyl
back.trans.methyl$avg <- (trans.methyl$avg)^4
back.trans.methyl$Upper <- (trans.methyl$Upper)^4
back.trans.methyl$Lower <- (trans.methyl$Lower)^4
back.trans.methyl
#Plot backtransformed means and SE
Fig19 <- ggplot(data=back.trans.methyl, aes(x=factor(Species), y=(avg), fill=Treatment)) + #plot methylation data averages
geom_bar()+
geom_bar(stat="identity", position=position_dodge(), #use values and offset position so bars don't overlap
colour="black", # set line color,
size=.3, #set line weight
show_guide=FALSE) + #remove slash from legend
scale_fill_manual(values=c("blue", "red")) + #set fill color for bars
geom_errorbar(aes(ymin=Lower, ymax=Upper), #plot standard errors
width=.2,                    # set width of the error bars
position=position_dodge(.9)) + #offset position so bars don't overlap
ggtitle("B") + #set plot title
xlab("Species") + #Label the X Axis
ylab("% DNA Methylation")+ #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig19 #View figure
#------------------------------------------------
#CAPTURE ALL STATISTICAL OUTPUT TO A FILE
setwd(file.path(mainDir, 'Output'))
capture.output(MC.OPLSResults, PD.OPLSResults, ALL.OPLSResults, Growth.results, Growth.stats, Growth.RM.posthoc.p, methylation.results, methylation.stats, methylation.HSD, RSD.result,  file="Bulk_Methylation_Statistical_Results.txt")
Figure.S1 <- arrangeGrob(Fig3, Fig2, Fig1, ncol=3)
ggsave(file="FigureS1_Manuscript.pdf", Figure.S1, width = 11, height = 4, units = c("in"))
Figure.S2 <- arrangeGrob(Fig6, Fig9, ncol=2)
ggsave(file="FigureS2_Manuscript.pdf", Figure.S2, width = 11, height = 4, units = c("in"))
Figure.S3 <- arrangeGrob(Fig.RSD, ncol=1)
ggsave(file="FigureS3_Manuscript.pdf", Figure.S3, width = 11, height = 4, units = c("in"))
Figure.1 <- arrangeGrob(Fig11, Fig12, ncol=2)
ggsave(file="Figure1_Manuscript.pdf", Figure.1, width = 11, height = 4, units = c("in"))
Figure.2 <- arrangeGrob(Fig13, Fig14, Fig15, ncol=1)
ggsave(file="Figure2_Manuscript.pdf", Figure.2, width = 5, height = 11, units = c("in"))
Figure.3 <- arrangeGrob(Fig17, Fig19, ncol=2)
ggsave(file="Figure3_Manuscript.pdf", Figure.3, width = 11, height = 4, units = c("in"))
setwd(file.path(mainDir, 'Output'))
write.table (mean.carb.output, "Seawater_chemistry_table_Output.csv", sep=",", row.names = FALSE)
setwd(file.path(mainDir, 'Data'))
Acc.light.N #View data
Acc.temp.N
Field.temp.N
Tank5.temp.N
Tank4.temp.N
mean.tank.light
sample.counts
MC.counts
PD.counts
growth.rate
G.counts.6
G.counts.4
G.counts.2
G.counts.2 <- aggregate(growth.rate["Week2"], by=growth.rate[c("Species","Treatment")], FUN=na.omit(length))
G.counts.2
G.counts.4 <- aggregate(growth.rate["Week4"], by=growth.rate[c("Species","Treatment")], FUN=na.omit(length))
G.counts.4
G.counts.6 <- aggregate(growth.rate["Week6"], by=growth.rate[c("Species","Treatment")], FUN=na.omit(length))
G.counts.6
View(G.counts.6)
View(growth.rate)
back.trans.growth
Fig17
